#define _USE_MATH_DEFINES 
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <math.h>
#include <locale.h>

// Функция: (x + 1)/sqrt(x^2 + 1)
double F(double x) {
    return (x + 1) / sqrt(x * x + 1);
}

// Первообразная функция: sqrt(x^2+1) + asinh(x)
double integral_F(double x) {
    return sqrt(x * x + 1) + asinh(x);
}

// Метод средних прямоугольников
double method_medium_rect(double a, double b, int n) {
    double h = (b - a) / n;
    double S = 0;
    for (int i = 1; i <= n; i++) {
        S += F(a + (i - 0.5) * h);
    }
    return h * S;
}

// Метод левых прямоугольников
double method_left_rect(double a, double b, int n) {
    double h = (b - a) / n;
    double S = 0;
    for (int i = 0; i < n; i++) {
        S += F(a + i * h);
    }
    return h * S;
}

// Метод правых прямоугольников
double method_right_rect(double a, double b, int n) {
    double h = (b - a) / n;
    double S = 0;
    for (int i = 1; i <= n; i++) {
        S += F(a + i * h);
    }
    return h * S;
}

// Метод трапеций
double method_trapezoid(double a, double b, int n) {
    double h = (b - a) / n;
    double S = 0;
    for (int i = 1; i < n; i++) {
        S += F(a + i * h);
    }
    return h * ((F(a) + F(b)) / 2 + S);
}

// Метод Симпсона
double method_simpsons(double a, double b, int n) {
    if (n % 2 != 0) n++;
    double h = (b - a) / n;
    double S1 = 0, S2 = 0;
    for (int i = 1; i < n; i++) {
        if (i % 2 == 0) {
            S1 += F(a + i * h);
        }
        else {
            S2 += F(a + i * h);
        }
    }
    return h / 3 * (F(a) + F(b) + 2 * S1 + 4 * S2);
}

int main() {
    setlocale(LC_ALL, "Russian");
    double a = -0.4, b = 1.6;
    int n_values[] = {4, 40, 140};
    int num_values = sizeof(n_values) / sizeof(n_values[0]);

    // Вычисление точного значения через первообразную
    double integral = integral_F(b) - integral_F(a);

    printf("Вычисление интеграла от %.1f до %.1f функции (x+1)/sqrt(x^2+1)\n", a, b);
    printf("Точное значение интеграла: %.7f\n\n", integral);

    // Метод левых прямоугольников
    printf("Метод левых прямоугольников:\n");
    printf("n\tЗначение\tПогрешность\n");
    printf("--------------------------------------------\n");
    for (int i = 0; i < num_values; i++) {
        int n = n_values[i];
        double res = method_left_rect(a, b, n);
        double abs_error = round(fabs(res - integral) * pow(10, 4)) / pow(10, 4);
        printf("%d\t%.4f\t\t%.4f\n", n, res, abs_error);
    }
    printf("\n");

    // Метод правых прямоугольников
    printf("Метод правых прямоугольников:\n");
    printf("n\tЗначение\tПогрешность\n");
    printf("--------------------------------------------\n");
    for (int i = 0; i < num_values; i++) {
        int n = n_values[i];
        double res = method_right_rect(a, b, n);
        double abs_error = round(fabs(res - integral) * pow(10, 4)) / pow(10, 4);
        printf("%d\t%.4f\t\t%.4f\n", n, res, abs_error);
    }
    printf("\n");

    // Метод средних прямоугольников
    printf("Метод средних прямоугольников:\n");
    printf("n\tЗначение\tПогрешность\n");
    printf("--------------------------------------------\n");
    for (int i = 0; i < num_values; i++) {
        int n = n_values[i];
        double res = method_medium_rect(a, b, n);
        double abs_error = round(fabs(res - integral) * pow(10, 4)) / pow(10, 4);
        printf("%d\t%.4f\t\t%.4f\n", n, res, abs_error);
    }
    printf("\n");

    // Метод трапеций
    printf("Метод трапеций:\n");
    printf("n\tЗначение\tПогрешность\n");
    printf("--------------------------------------------\n");
    for (int i = 0; i < num_values; i++) {
        int n = n_values[i];
        double res = method_trapezoid(a, b, n);
        double abs_error = round(fabs(res - integral) * pow(10, 4)) / pow(10, 4);
        printf("%d\t%.4f\t\t%.4f\n", n, res, abs_error);
    }
    printf("\n");

    // Метод Симпсона
    printf("Метод Симпсона:\n");
    printf("n\tЗначение\tПогрешность\n");
    printf("--------------------------------------------\n");
    for (int i = 0; i < num_values; i++) {
        int n = n_values[i];
        double res = method_simpsons(a, b, n);
        double abs_error = round(fabs(res - integral) * pow(10, 4)) / pow(10, 4);
        printf("%d\t%.4f\t\t%.4f\n", n, res, abs_error);
    }

    return 0;
}
