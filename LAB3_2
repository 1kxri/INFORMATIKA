#define _USE_MATH_DEFINES 
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <locale.h>
#include <math.h>
#include <time.h>

// Исходная функция: 2*arctg(x) - x + 3 = 0
double F(double x) {
    return 2 * atan(x) - x + 3;
}

// Первая производная: 2/(1+x^2) - 1
double F1(double x) {
    return 2.0 / (1 + x * x) - 1;
}

// Вторая производная: -4x/(1+x^2)^2
double F2(double x) {
    return -4 * x / ((1 + x * x) * (1 + x * x));
}

// Метод дихотомии
void dichotomy(double a, double b, double eps, double* result, int* iterations) {
    double c, f_a = F(a), f_b = F(b);
    int iter = 0;

    if (f_a * f_b >= 0) {
        *result = NAN;
        *iterations = 0;
        return;
    }

    printf("\nМетод дихотомии:\n");
    printf(" Итерация |     x      |   F(x)   \n");
    printf("-------------------------------------\n");

    do {
        c = (a + b) / 2;
        double f_c = F(c);
        printf("    %3d    | %10.6f | %10.6f\n", iter + 1, c, f_c);

        if (f_c == 0) break;
        if (f_a * f_c < 0) {
            b = c;
            f_b = f_c;
        }
        else {
            a = c;
            f_a = f_c;
        }
        iter++;
    } while (fabs(b - a) > eps && iter < 1000);

    *result = c;
    *iterations = iter;
}

// Метод хорд
void chord_method(double a, double b, double eps, double* result, int* iterations) {
    double x, f_a = F(a), f_b = F(b);
    int iter = 0;

    if (f_a * f_b >= 0) {
        *result = NAN;
        *iterations = 0;
        return;
    }

    printf("\nМетод хорд:\n");
    printf(" Итерация |     x      |   F(x)   \n");
    printf("-------------------------------------\n");

    do {
        x = a - f_a * (b - a) / (f_b - f_a);
        printf("    %3d    | %10.6f | %10.6f\n", iter + 1, x, F(x));

        if (F(x) * f_a < 0) {
            b = x;
            f_b = F(x);
        }
        else {
            a = x;
            f_a = F(x);
        }
        iter++;
    } while (fabs(F(x)) > eps && iter < 1000);

    *result = x;
    *iterations = iter;
}

// Метод простых итераций
void simple_iteration(double a, double b, double eps, double* result, int* iterations) {
    double x = (a + b) / 2;
    double x_prev;
    int iter = 0;

    if (F(a) * F(b) >= 0) {
        *result = NAN;
        *iterations = 0;
        return;
    }

    printf("\nМетод простых итераций:\n");
    printf(" Итерация |     x      |   F(x)   \n");
    printf("-------------------------------------\n");

    do {
        x_prev = x;
        x = x - F(x) / F1(x);
        printf("    %3d    | %10.6f | %10.6f\n", iter + 1, x, F(x));
        iter++;
    } while (fabs(x - x_prev) > eps && iter < 1000);

    *result = x;
    *iterations = iter;
}

// Метод Ньютона(метод касательных)
void newton_method(double a, double b, double eps, double* result, int* iterations) {
    double x = (F(a) * F2(a) > 0) ? a : b;
    double h;
    int iter = 0;

    if (F(a) * F(b) >= 0) {
        *result = NAN;
        *iterations = 0;
        return;
    }

    printf("\nМетод Ньютона:\n");
    printf(" Итерация |     x      |   F(x)   \n");
    printf("-------------------------------------\n");

    do {
        h = F(x) / F1(x);
        printf("    %3d    | %10.6f | %10.6f\n", iter + 1, x, F(x));
        x -= h;
        iter++;
    } while (fabs(h) > eps && iter < 1000);

    *result = x;
    *iterations = iter;
}

// Метод секущих
void secant_method(double a, double b, double eps, double* result, int* iterations) {
    double x0 = a, x1 = b, x2;
    int iter = 0;

    if (F(a) * F(b) >= 0) {
        *result = NAN;
        *iterations = 0;
        return;
    }

    printf("\nМетод секущих :\n");
    printf(" Итерация |     x      |   F(x)   \n");
    printf("-------------------------------------\n");

    do {
        x2 = x1 - F(x1) * (x1 - x0) / (F(x1) - F(x0));
        printf("    %3d    | %10.6f | %10.6f\n", iter + 1, x2, F(x2));
        x0 = x1;
        x1 = x2;
        iter++;
    } while (fabs(F(x2)) > eps && iter < 1000);

    *result = x2;
    *iterations = iter;
}

// Комбинированный метод
void combined_method(double a, double b, double eps, double* result, int* iterations) {
    double an = a, bn = b;
    int iter = 0;

    if (F(a) * F(b) >= 0) {
        *result = NAN;
        *iterations = 0;
        return;
    }

    printf("\nКомбинированный метод:\n");
    printf(" Итерация |     x      |   F(x)   \n");
    printf("-------------------------------------\n");

    if (F1(a) * F2(a) > 0) {
        an = a;
        bn = b;
    }
    else {
        bn = a;
        an = b;
    }

    do {
        an = an - F(an) * (bn - an) / (F(bn) - F(an));
        bn = bn - F(bn) / F1(bn);
        printf("    %3d    | %10.6f | %10.6f\n", iter + 1, (an + bn) / 2, F((an + bn) / 2));
        iter++;
    } while (fabs(bn - an) > eps && iter < 1000);

    *result = (an + bn) / 2;
    *iterations = iter;
}

int main() {
    setlocale(LC_ALL, "Russian");
    double a, b, eps = 0.00001;
    int method_choice;

    printf("Выберите метод:\n");
    printf("1. Метод дихотомии\n");
    printf("2. Метод хорд\n");
    printf("3. Метод простых итераций\n");
    printf("4. Метод Ньютона\n");
    printf("5. Метод секущих\n");
    printf("6. Комбинированный метод\n");
    printf("7. Все методы\n");
    printf("Введите номер метода: ");
    scanf("%d", &method_choice);

    printf("Введите интервал [a, b]: ");
    while (scanf("%lf %lf", &a, &b) != 2) {
        printf("Ошибка ввода. Введите два числа через пробел: ");
        while (getchar() != '\n'); 
    }

    double result;
    int iterations;
    switch (method_choice) {
    case 1:
        dichotomy(a, b, eps, &result, &iterations);
        printf("Метод дихотомии: Результат = %.6f, Итераций = %d\n", result, iterations);
        break;
    case 2:
        chord_method(a, b, eps, &result, &iterations);
        printf("Метод хорд: Результат = %.6f, Итераций = %d\n", result, iterations);
        break;
    case 3:
        simple_iteration(a, b, eps, &result, &iterations);
        printf("Метод простых итераций: Результат = %.6f, Итераций = %d\n", result, iterations);
        break;
    case 4:
        newton_method(a, b, eps, &result, &iterations);
        printf("Метод Ньютона: Результат = %.6f, Итераций = %d\n", result, iterations);
        break;
    case 5:
        secant_method(a, b, eps, &result, &iterations);
        printf("Метод секущих: Результат = %.6f, Итераций = %d\n", result, iterations);
        break;
    case 6:
        combined_method(a, b, eps, &result, &iterations);
        printf("Комбинированный метод: Результат = %.6f, Итераций = %d\n", result, iterations);
        break;
    case 7:
        printf("\nРезультаты для всех методов:\n");
        dichotomy(a, b, eps, &result, &iterations);
        printf("Метод дихотомии: Результат = %.6f, Итераций = %d\n", result, iterations);
        chord_method(a, b, eps, &result, &iterations);
        printf("Метод хорд: Результат = %.6f, Итераций = %d\n", result, iterations);
        simple_iteration(a, b, eps, &result, &iterations);
        printf("Метод простых итераций: Результат = %.6f, Итераций = %d\n", result, iterations);
        newton_method(a, b, eps, &result, &iterations);
        printf("Метод Ньютона: Результат = %.6f, Итераций = %d\n", result, iterations);
        secant_method(a, b, eps, &result, &iterations);
        printf("Метод секущих: Результат = %.6f, Итераций = %d\n", result, iterations);
        combined_method(a, b, eps, &result, &iterations);
        printf("Комбинированный метод: Результат = %.6f, Итераций = %d\n", result, iterations);
        break;
    default:
        printf("Неверный выбор метода .\n");
        return 1;
    }
    return 0;
}
