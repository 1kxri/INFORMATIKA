#define _USE_MATH_DEFINES 
#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include <locale.h>
#include <math.h>
#include <time.h>

// Исходная функция: 2*arctg(x) - x + 3 = 0 (из первого кода)
double F(double x) {
    return 2 * atan(x) - x + 3;
}

// Первая производная: 2/(1+x^2) - 1
double F1(double x) {
    return 2.0 / (1 + x * x) - 1;
}

// Вторая производная: -4x/(1+x^2)^2
double F2(double x) {
    return -4 * x / ((1 + x * x) * (1 + x * x));
}

// Функция для метода простых итераций
double g(double x) {
    return x - F(x) / F1(x);
}

// Метод дихотомии (из второго кода, адаптированный)
void dichotomy(double a, double b, double eps, double* result, int* iterations) {
    double f1 = F(a), f, x, t;
    int n = 0;

    printf("\nМетод дихотомии:\n");
    printf(" Итерация |     x      |   F(x)   \n");
    printf("-------------------------------------\n");

    if (F(a) * F(b) >= 0) {
        *result = NAN;
        *iterations = 0;
        printf("На отрезке корней нет!\n");
        return;
    }

    do {
        t = (a + b) / 2;
        double f2 = F(t);
        printf("    %3d    | %10.6f | %10.6f\n", n, t, f2);

        if (f1 * f2 < 0) {
            b = t;
        }
        else {
            a = t;
            f1 = f2;
        }
        n++;
    } while (fabs(b - a) > eps);

    x = (a + b) / 2;
    f = F(x);
    *result = x;
    *iterations = n;
}

// Метод хорд (из второго кода, адаптированный)
void chord_method(double a, double b, double eps, double* result, int* iterations) {
    double f1, f2, fz, x, z, h;
    int n = 0;

    printf("\nМетод хорд:\n");
    printf(" Итерация |     x      |   F(x)   \n");
    printf("-------------------------------------\n");

    if (F(a) * F2(b) >= 0) {
        *result = NAN;
        *iterations = 0;
        printf("На заданном интервале корни отсутствуют!\n");
        return;
    }

    f1 = F(a);
    f2 = F2(a);
    if (f1 * f2 > 0) {
        x = b;
        z = a;
    }
    else {
        x = a;
        z = b;
    }
    fz = F(z);

    do {
        f1 = F(x);
        h = (x - z) / (f1 - fz) * f1;
        x -= h;
        printf("    %3d    | %10.6f | %10.6f\n", n, x, F(x));
        n++;
    } while (fabs(h) > eps);

    f1 = F(x);
    *result = x;
    *iterations = n;
}

// Метод простых итераций (из второго кода, адаптированный)
void simple_iteration(double a, double b, double eps, double* result, int* iterations) {
    double x0 = (a + b) / 2, x, f1;
    int n = 0;

    printf("\nМетод простых итераций:\n");
    printf(" Итерация |     x      |   F(x)   \n");
    printf("-------------------------------------\n");

    if (F(a) * F(b) >= 0) {
        *result = NAN;
        *iterations = 0;
        printf("На отрезке корней нет!\n");
        return;
    }

    do {
        x = g(x0);
        printf("    %3d    | %10.6f | %10.6f\n", n, x, F(x));
        n++;
        if (fabs(x - x0) <= eps) break;
        x0 = x;
    } while (n < 1000);

    f1 = F(x0);
    *result = x0;
    *iterations = n;
}

// Метод Ньютона (из второго кода, адаптированный)
void newton_method(double a, double b, double eps, double* result, int* iterations) {
    double f = F(b), f1, h, x;
    int n = 0;

    printf("\nМетод Ньютона:\n");
    printf(" Итерация |     x      |   F(x)   \n");
    printf("-------------------------------------\n");

    if (F(a) * F(b) >= 0) {
        *result = NAN;
        *iterations = 0;
        printf("На отрезке корней нет!\n");
        return;
    }

    f = F(b);
    double f2 = F2(b);
    x = (F(a) * F2(a) > 0) ? a : b;  // Выбор начального приближения

    do {
        f = F(x);
        f1 = F1(x);
        h = f / f1;
        x = x - h;
        printf("    %3d    | %10.6f | %10.6f\n", n, x, F(x));
        n++;
    } while (fabs(h) > eps);

    f = F(x);
    *result = x;
    *iterations = n;
}

// Метод секущих (из второго кода, адаптированный)
void secant_method(double a, double b, double eps, double* result, int* iterations) {
    double x0 = a, x1 = b, x2, f1;
    int n = 0;

    printf("\nМетод секущих:\n");
    printf(" Итерация |     x      |   F(x)   \n");
    printf("-------------------------------------\n");

    if (F(a) * F(b) >= 0) {
        *result = NAN;
        *iterations = 0;
        printf("На отрезке корней нет!\n");
        return;
    }

    x1 = x2 = b;
    do {
        x1 = x2;
        x2 = x1 - F(x1) * (x1 - x0) / (F(x1) - F(x0));
        x0 = x1;
        printf("    %3d    | %10.6f | %10.6f\n", n, x2, F(x2));
        n++;
    } while (fabs(x2 - x1) > eps);

    *result = x2;
    *iterations = n;
}

// Комбинированный метод (из второго кода, адаптированный)
void combined_method(double a, double b, double eps, double* result, int* iterations) {
    double f1 = F1(a), f2 = F2(a), an, bn;
    int n = 0;

    printf("\nКомбинированный метод:\n");
    printf(" Итерация |     x      |   F(x)   \n");
    printf("-------------------------------------\n");

    if (F(a) * F(b) >= 0) {
        *result = NAN;
        *iterations = 0;
        printf("На отрезке корней нет!\n");
        return;
    }

    if (f1 * f2 > 0) {
        an = a;
        bn = b;
    }
    else {
        bn = a;
        an = b;
    }

    do {
        f1 = F(an);
        an = an - F(an) * (bn - an) / (F(bn) - f1);
        bn = bn - F(bn) / F1(bn);
        printf("    %3d    | %10.6f | %10.6f\n", n, (an + bn) / 2, F((an + bn) / 2));
        n++;
    } while (fabs(bn - an) > eps);

    *result = (an + bn) / 2;
    *iterations = n;
}

int main() {
    setlocale(LC_ALL, "Russian");
    double a, b, eps = 0.00001;
    int method_choice;

    printf("Выберите метод:\n");
    printf("1. Метод дихотомии\n");
    printf("2. Метод хорд\n");
    printf("3. Метод простых итераций\n");
    printf("4. Метод Ньютона\n");
    printf("5. Метод секущих\n");
    printf("6. Комбинированный метод\n");
    printf("7. Все методы\n");
    printf("Введите номер метода: ");
    scanf("%d", &method_choice);

    printf("Введите интервал [a, b]: ");
    while (scanf("%lf %lf", &a, &b) != 2) {
        printf("Ошибка ввода. Введите два числа через пробел: ");
        while (getchar() != '\n');
    }

    double result;
    int iterations;
    clock_t start, end;

    start = clock();
    switch (method_choice) {
    case 1:
        dichotomy(a, b, eps, &result, &iterations);
        printf("Метод дихотомии: Результат = %.6f, Итераций = %d\n", result, iterations);
        break;
    case 2:
        chord_method(a, b, eps, &result, &iterations);
        printf("Метод хорд: Результат = %.6f, Итераций = %d\n", result, iterations);
        break;
    case 3:
        simple_iteration(a, b, eps, &result, &iterations);
        printf("Метод простых итераций: Результат = %.6f, Итераций = %d\n", result, iterations);
        break;
    case 4:
        newton_method(a, b, eps, &result, &iterations);
        printf("Метод Ньютона: Результат = %.6f, Итераций = %d\n", result, iterations);
        break;
    case 5:
        secant_method(a, b, eps, &result, &iterations);
        printf("Метод секущих: Результат = %.6f, Итераций = %d\n", result, iterations);
        break;
    case 6:
        combined_method(a, b, eps, &result, &iterations);
        printf("Комбинированный метод: Результат = %.6f, Итераций = %d\n", result, iterations);
        break;
    case 7:
        printf("\nРезультаты для всех методов:\n");
        dichotomy(a, b, eps, &result, &iterations);
        printf("Метод дихотомии: Результат = %.6f, Итераций = %d\n", result, iterations);
        chord_method(a, b, eps, &result, &iterations);
        printf("Метод хорд: Результат = %.6f, Итераций = %d\n", result, iterations);
        simple_iteration(a, b, eps, &result, &iterations);
        printf("Метод простых итераций: Результат = %.6f, Итераций = %d\n", result, iterations);
        newton_method(a, b, eps, &result, &iterations);
        printf("Метод Ньютона: Результат = %.6f, Итераций = %d\n", result, iterations);
        secant_method(a, b, eps, &result, &iterations);
        printf("Метод секущих: Результат = %.6f, Итераций = %d\n", result, iterations);
        combined_method(a, b, eps, &result, &iterations);
        printf("Комбинированный метод: Результат = %.6f, Итераций = %d\n", result, iterations);
        break;
    default:
        printf("Неверный выбор метода.\n");
        return 1;
    }
    end = clock();
    printf("Время выполнения: %.6f секунд\n", (double)(end - start) / CLOCKS_PER_SEC);

    return 0;
}
